// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model - main user table
model User {
  id                Int                   @id @default(autoincrement())
  username          String?               @unique
  email             String?
  firstName         String?               @map("first_name")
  lastName          String?               @map("last_name")
  password          String?               // For local authentication
  isActive          Boolean               @default(true) @map("is_active")
  isAdmin           Boolean               @default(false) @map("is_admin")
  isModerator       Boolean               @default(false) @map("is_moderator")
  dateJoined        DateTime              @default(now()) @map("date_joined")
  lastLogin         DateTime?             @map("last_login")
  attributes        Json?
  authentikId       String?               @unique @map("authentik_id")
  signalIdentity    String?               @map("signal_identity")
  // signalVerified    Boolean               @default(false) @map("signal_verified")
  // signalPhoneNumber String?               @map("signal_phone_number")
  matrixUsername    String?               @map("matrix_username")
  
  // Relationships
  notes             UserNote[]
  groups            UserGroup[]
  moderatorPermissions ModeratorPermission[]
  sentInvitations   UserInvitation[] @relation("UserInvitations")
  emailHistory      EmailHistory[]
  verificationCodes SignalVerificationCode[]
  
  @@map("users")
}

// Admin events logging
model AdminEvent {
  id        Int      @id @default(autoincrement())
  eventType String   @map("event_type")
  username  String?
  details   String?
  timestamp DateTime @default(now())
  
  @@map("admin_events")
}

// Dashboard settings
model DashboardSettings {
  id        Int      @id @default(autoincrement())
  key       String   @unique
  value     Json
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")
  
  @@map("dashboard_settings")
}

// Community bookmarks
model CommunityBookmark {
  id          Int      @id @default(autoincrement())
  title       String
  description String?
  url         String
  icon        String?
  category    String   @default("general")
  order       Int      @default(0)
  isActive    Boolean  @default(true) @map("is_active")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @default(now()) @updatedAt @map("updated_at")
  
  @@map("community_bookmarks")
}

// Dashboard announcements
model DashboardAnnouncement {
  id        Int      @id @default(autoincrement())
  title     String
  content   String
  type      String   @default("info") // info, warning, success, error
  isActive  Boolean  @default(true) @map("is_active")
  priority  Int      @default(0)
  expiresAt DateTime? @map("expires_at")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")
  createdBy String   @map("created_by")
  
  @@map("dashboard_announcements")
}

// User invitations tracking
model UserInvitation {
  id          Int      @id @default(autoincrement())
  inviterUserId Int?   @map("inviter_user_id")
  inviteeEmail String @map("invitee_email")
  inviteeName String? @map("invitee_name")
  inviteePhone String? @map("invitee_phone") // Phone number field
  roomIds     String[] @map("room_ids") // Array of room IDs to add the user to
  status      String   @default("pending") // pending, accepted, expired, cancelled
  inviteToken String?  @map("invite_token")
  message     String?
  expiresAt   DateTime @map("expires_at")
  acceptedAt  DateTime? @map("accepted_at")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @default(now()) @updatedAt @map("updated_at")
  
  // Relations
  inviter User? @relation("UserInvitations", fields: [inviterUserId], references: [id], onDelete: Cascade)
  
  @@index([inviterUserId])
  @@index([inviteeEmail])
  @@index([status])
  @@map("user_invitations")
}

// Community timeline events for transparency
model CommunityEvent {
  id        Int      @id @default(autoincrement())
  eventType String   @map("event_type")
  username  String
  details   String
  timestamp DateTime @default(now())
  isPublic  Boolean  @default(true) @map("is_public") // Whether event should be shown in public timeline
  category  String?  // Optional category for filtering (user_management, messaging, system, etc.)
  
  @@index([timestamp])
  @@index([eventType])
  @@index([isPublic])
  @@map("community_events")
}

// Email verification codes
model VerificationCode {
  id        Int      @id @default(autoincrement())
  userId    String   @map("user_id")
  code      String
  createdAt DateTime @default(now()) @map("created_at")
  expiresAt DateTime @map("expires_at")
  
  @@map("verification_codes")
}

// Matrix room members
model MatrixRoomMember {
  id          Int      @id @default(autoincrement())
  roomId      String   @map("room_id")
  userId      String   @map("user_id")
  displayName String?  @map("display_name")
  avatarUrl   String?  @map("avatar_url")
  membership  String?
  lastUpdated DateTime @default(now()) @updatedAt @map("last_updated")
  
  @@unique([roomId, userId], name: "idx_matrix_room_member_room_user")
  @@map("matrix_room_members")
}

// User notes from moderators
model UserNote {
  id           Int      @id @default(autoincrement())
  userId       Int      @map("user_id")
  content      String
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @default(now()) @updatedAt @map("updated_at")
  createdBy    String   @map("created_by")
  lastEditedBy String?  @map("last_edited_by")
  
  // Relationships
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("user_notes")
}

// Invitation system
model Invite {
  id        Int       @id @default(autoincrement())
  token     String    @unique
  label     String?
  email     String?   // Email for personalized invites
  name      String?   // Full name for personalized invites
  groups    String?   // JSON array of group IDs to pre-assign
  createdAt DateTime  @default(now()) @map("created_at")
  expiresAt DateTime  @map("expires_at")
  createdBy String?   @map("created_by")
  isUsed    Boolean   @default(false) @map("is_used")
  usedBy    String?   @map("used_by")
  usedAt    DateTime? @map("used_at")
  
  @@map("invites")
}

// Groups for Authentik integration
model Group {
  id               Int         @id @default(autoincrement())
  name             String      @unique
  description      String?
  authentikGroupId String?     @map("authentik_group_id")
  
  // Relationships
  users UserGroup[]
  
  @@map("groups")
}

// User-Group relationship table
model UserGroup {
  userId  Int @map("user_id")
  groupId Int @map("group_id")
  
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  group Group @relation(fields: [groupId], references: [id], onDelete: Cascade)
  
  @@id([userId, groupId])
  @@map("user_groups")
}

// Moderator permissions
model ModeratorPermission {
  id              Int      @id @default(autoincrement())
  userId          Int      @map("user_id")
  permissionType  String   @map("permission_type")
  permissionValue String?  @map("permission_value")
  createdAt       DateTime @default(now()) @map("created_at")
  createdBy       String   @map("created_by")
  
  // Relationships
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([permissionType, permissionValue])
  @@map("moderator_permissions")
}

// Matrix user cache
model MatrixUser {
  userId       String    @id @map("user_id")
  displayName  String?   @map("display_name")
  avatarUrl    String?   @map("avatar_url")
  isSignalUser Boolean   @default(false) @map("is_signal_user")
  lastSeen     DateTime? @map("last_seen")
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime  @default(now()) @updatedAt @map("updated_at")
  
  // Relationships
  memberships MatrixRoomMembership[]
  
  @@index([isSignalUser])
  @@map("matrix_users")
}

// Matrix room cache
model MatrixRoom {
  roomId        String    @id @map("room_id")
  name          String?
  displayName   String?   @map("display_name")
  topic         String?
  canonicalAlias String?  @map("canonical_alias")
  memberCount   Int       @default(0) @map("member_count")
  roomType      String?   @map("room_type")
  isDirect      Boolean   @default(false) @map("is_direct")
  isEncrypted   Boolean   @default(false) @map("is_encrypted")
  lastSynced    DateTime? @map("last_synced")
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @default(now()) @updatedAt @map("updated_at")
  
  // Relationships
  memberships MatrixRoomMembership[]
  
  @@index([memberCount])
  @@index([isDirect])
  @@index([lastSynced])
  @@map("matrix_rooms")
}

// Matrix room membership cache
model MatrixRoomMembership {
  id               Int      @id @default(autoincrement())
  roomId           String   @map("room_id")
  userId           String   @map("user_id")
  membershipStatus String   @default("join") @map("membership_status")
  joinedAt         DateTime? @map("joined_at")
  createdAt        DateTime  @default(now()) @map("created_at")
  updatedAt        DateTime  @default(now()) @updatedAt @map("updated_at")
  
  // Relationships
  user MatrixUser @relation(fields: [userId], references: [userId], onDelete: Cascade)
  room MatrixRoom @relation(fields: [roomId], references: [roomId], onDelete: Cascade)
  
  @@unique([roomId, userId])
  @@index([roomId])
  @@index([userId])
  @@map("matrix_cache_memberships")
}

// Matrix sync status tracking
model MatrixSyncStatus {
  id                   Int      @id @default(autoincrement())
  syncType             String   @map("sync_type")
  status               String   @default("pending")
  lastSync             DateTime? @map("last_sync")
  totalItems           Int      @default(0) @map("total_items")
  processedItems       Int      @default(0) @map("processed_items")
  errorMessage         String?  @map("error_message")
  syncDurationSeconds  Int?     @map("sync_duration_seconds")
  createdAt            DateTime @default(now()) @map("created_at")
  updatedAt            DateTime @default(now()) @updatedAt @map("updated_at")
  
  @@index([syncType])
  @@index([status])
  @@map("matrix_sync_status")
}

// Matrix user cache aggregated
model MatrixUserCache {
  userId       String    @id @map("user_id")
  displayName  String?   @map("display_name")
  avatarUrl    String?   @map("avatar_url")
  isSignalUser Boolean   @default(false) @map("is_signal_user")
  roomCount    Int       @default(0) @map("room_count")
  lastActivity DateTime? @map("last_activity")
  cacheUpdated DateTime  @default(now()) @updatedAt @map("cache_updated")
  
  @@index([isSignalUser])
  @@index([roomCount])
  @@map("matrix_user_cache")
}

// Email communication history tracking
model EmailHistory {
  id              Int      @id @default(autoincrement())
  recipientId     Int?     @map("recipient_id") // User ID if recipient is a registered user
  recipientEmail  String   @map("recipient_email")
  senderUsername  String   @map("sender_username") // Admin who sent the email
  subject         String
  emailType       String   @map("email_type") // 'welcome', 'admin_message', 'invite', 'password_reset', 'custom'
  status          String   @default("sent") // 'sent', 'failed', 'queued'
  sentAt          DateTime @default(now()) @map("sent_at")
  deliveredAt     DateTime? @map("delivered_at")
  errorMessage    String?  @map("error_message")
  messagePreview  String?  @map("message_preview") // First 200 chars for search/preview
  
  // Relations
  recipient       User?    @relation(fields: [recipientId], references: [id], onDelete: SetNull)
  
  @@index([recipientId])
  @@index([senderUsername])
  @@index([sentAt])
  @@index([emailType])
  @@index([status])
  @@map("email_history")
}

// Signal verification codes for account linking
model SignalVerificationCode {
  id            Int       @id @default(autoincrement())
  userId        Int       @map("user_id")
  phoneNumber   String    @map("phone_number")
  code          String    // Hashed verification code
  salt          String    // Salt for hashing
  attempts      Int       @default(0)
  maxAttempts   Int       @default(3) @map("max_attempts")
  verified      Boolean   @default(false)
  expiresAt     DateTime  @map("expires_at")
  verifiedAt    DateTime? @map("verified_at")
  createdAt     DateTime  @default(now()) @map("created_at")
  
  // Relations
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([phoneNumber])
  @@index([expiresAt])
  @@index([verified])
  @@map("signal_verification_codes")
}
