services:
  app:
    build: 
      context: .
      dockerfile: Dockerfile
    ports:
      - "${PORT:-8503}:3000"  # Map container's internal port 3000 to host's port (default 8503)
    env_file:
      - .env
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
      - NEXTAUTH_URL=http://localhost:${PORT:-8503}
      - NEXTAUTH_SECRET=${NEXTAUTH_SECRET}
      # Database seeding (set to true for initial setup)
      - SEED_DATABASE=${SEED_DATABASE:-true}
      # Enable local authentication
      - ENABLE_LOCAL_AUTH=${ENABLE_LOCAL_AUTH:-true}
      # Admin credentials for seeding
      - DEFAULT_ADMIN_PASSWORD=${DEFAULT_ADMIN_PASSWORD}
      - DEFAULT_ADMIN_USERNAME=${DEFAULT_ADMIN_USERNAME:-admin}
      # Authentication provider configuration
      - AUTHENTIK_CLIENT_ID=${AUTHENTIK_CLIENT_ID}
      - AUTHENTIK_CLIENT_SECRET=${AUTHENTIK_CLIENT_SECRET}
      - AUTHENTIK_ISSUER=${AUTHENTIK_ISSUER}
      - AUTHENTIK_REDIRECT_URI=${AUTHENTIK_REDIRECT_URI}
      # Legacy Authentik API (still used for user management)
      - AUTHENTIK_API_TOKEN=${AUTHENTIK_API_TOKEN}
      - AUTHENTIK_BASE_URL=${AUTHENTIK_BASE_URL:-}
      - FLOW_ID=${FLOW_ID}
      - INVITE_FLOW_ID=${INVITE_FLOW_ID}
      - INVITE_LABEL=${INVITE_LABEL}
      - BASE_DOMAIN=${BASE_DOMAIN}
      # Email configuration
      - SMTP_HOST=${SMTP_HOST}
      - SMTP_PORT=${SMTP_PORT}
      - SMTP_USER=${SMTP_USER}
      - SMTP_PASS=${SMTP_PASS}
      - SMTP_FROM=${SMTP_FROM}
      - SMTP_BCC=${SMTP_BCC}
      # Matrix configuration
      - MATRIX_HOMESERVER=${MATRIX_HOMESERVER}
      - MATRIX_ACCESS_TOKEN=${MATRIX_ACCESS_TOKEN}
      - MATRIX_USER_ID=${MATRIX_USER_ID}
      - MATRIX_DOMAIN=${MATRIX_DOMAIN}
      - MATRIX_DEFAULT_ROOM_ID=${MATRIX_DEFAULT_ROOM_ID}
      - MATRIX_WELCOME_ROOM_ID=${MATRIX_WELCOME_ROOM_ID}
      - MATRIX_SIGNAL_BRIDGE_ROOM_ID=${MATRIX_SIGNAL_BRIDGE_ROOM_ID}
      - MATRIX_SIGNAL_BOT_USERNAME=${MATRIX_SIGNAL_BOT_USERNAME}
      - SIGNAL_BRIDGE_BOT_RESPONSE_DELAY=${SIGNAL_BRIDGE_BOT_RESPONSE_DELAY}
      - SIGNAL_INDOC_LINK=${SIGNAL_INDOC_LINK}
      - MATRIX_INDOC_ROOM_ID=${MATRIX_INDOC_ROOM_ID}
      - MATRIX_MIN_ROOM_MEMBERS=${MATRIX_MIN_ROOM_MEMBERS:-3}
      - MATRIX_ACTIVE=${MATRIX_ACTIVE:-false}
    depends_on:
      db:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:${PORT:-3000}"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  db:
    image: postgres:15
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    ports:
      - "${POSTGRES_PORT:-5436}:5432" # POSTGRES_PORT is the external host port (default 5436), 5432 is the internal container port
      # Applications inside Docker should always connect to port 5432 via the internal Docker network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

volumes:
  postgres_data:
