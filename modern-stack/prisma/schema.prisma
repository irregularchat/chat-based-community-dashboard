// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model - main user table
model User {
  id                Int                   @id @default(autoincrement())
  username          String?               @unique
  email             String?
  firstName         String?               @map("first_name")
  lastName          String?               @map("last_name")
  password          String?               // For local authentication
  isActive          Boolean               @default(true) @map("is_active")
  isAdmin           Boolean               @default(false) @map("is_admin")
  isModerator       Boolean               @default(false) @map("is_moderator")
  dateJoined        DateTime              @default(now()) @map("date_joined")
  lastLogin         DateTime?             @map("last_login")
  attributes        Json?
  authentikId       String?               @unique @map("authentik_id")
  signalIdentity    String?               @map("signal_identity")
  signalVerified    Boolean               @default(false) @map("signal_verified")
  signalPhoneNumber String?               @map("signal_phone_number")
  matrixUsername    String?               @map("matrix_username")
  
  // Relationships
  notes             UserNote[]
  groups            UserGroup[]
  moderatorPermissions ModeratorPermission[]
  sentInvitations   UserInvitation[] @relation("UserInvitations")
  emailHistory      EmailHistory[]
  verificationCodes SignalVerificationCode[]
  signalGroupMemberships SignalGroupMembership[]
  signalGroupJoinRequests SignalGroupJoinRequest[]
  processedSignalRequests SignalGroupJoinRequest[] @relation("ProcessedRequests")
  adminGroups SignalAvailableGroup[] @relation("GroupAdmin")
  
  @@map("users")
}

// Admin events logging
model AdminEvent {
  id        Int      @id @default(autoincrement())
  eventType String   @map("event_type")
  username  String?
  details   String?
  timestamp DateTime @default(now())
  
  @@map("admin_events")
}

// Dashboard settings
model DashboardSettings {
  id        Int      @id @default(autoincrement())
  key       String   @unique
  value     Json
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")
  
  @@map("dashboard_settings")
}

// Community bookmarks
model CommunityBookmark {
  id          Int      @id @default(autoincrement())
  title       String
  description String?
  url         String
  icon        String?
  category    String   @default("general")
  order       Int      @default(0)
  isActive    Boolean  @default(true) @map("is_active")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @default(now()) @updatedAt @map("updated_at")
  
  @@map("community_bookmarks")
}

// Dashboard announcements
model DashboardAnnouncement {
  id        Int      @id @default(autoincrement())
  title     String
  content   String
  type      String   @default("info") // info, warning, success, error
  isActive  Boolean  @default(true) @map("is_active")
  priority  Int      @default(0)
  expiresAt DateTime? @map("expires_at")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")
  createdBy String   @map("created_by")
  
  @@map("dashboard_announcements")
}

// User invitations tracking
model UserInvitation {
  id          Int      @id @default(autoincrement())
  inviterUserId Int?   @map("inviter_user_id")
  inviteeEmail String @map("invitee_email")
  inviteeName String? @map("invitee_name")
  inviteePhone String? @map("invitee_phone") // Phone number field
  roomIds     String[] @map("room_ids") // Array of room IDs to add the user to
  status      String   @default("pending") // pending, accepted, expired, cancelled
  inviteToken String?  @map("invite_token")
  message     String?
  expiresAt   DateTime @map("expires_at")
  acceptedAt  DateTime? @map("accepted_at")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @default(now()) @updatedAt @map("updated_at")
  
  // Relations
  inviter User? @relation("UserInvitations", fields: [inviterUserId], references: [id], onDelete: Cascade)
  
  @@index([inviterUserId])
  @@index([inviteeEmail])
  @@index([status])
  @@map("user_invitations")
}

// Community timeline events for transparency
model CommunityEvent {
  id        Int      @id @default(autoincrement())
  eventType String   @map("event_type")
  username  String
  details   String
  timestamp DateTime @default(now())
  isPublic  Boolean  @default(true) @map("is_public") // Whether event should be shown in public timeline
  category  String?  // Optional category for filtering (user_management, messaging, system, etc.)
  
  @@index([timestamp])
  @@index([eventType])
  @@index([isPublic])
  @@map("community_events")
}

// Signal Events - Community events synced with Discourse
model SignalEvent {
  id                 Int       @id @default(autoincrement())
  discourseTopicId   Int?      @unique @map("discourse_topic_id")
  discoursePostId    Int?      @map("discourse_post_id")
  eventName          String    @map("event_name")
  eventStart         DateTime  @map("event_start")
  eventEnd           DateTime? @map("event_end")
  location           String?
  timezone           String    @default("America/New_York")
  status             String    @default("public")
  description        String?   @db.Text
  discourseUrl       String?   @map("discourse_url")
  createdBy          String?   @map("created_by")
  createdAt          DateTime  @default(now()) @map("created_at")
  updatedAt          DateTime  @updatedAt @map("updated_at")
  isActive           Boolean   @default(true) @map("is_active")
  allowedGroups      String    @default("trust_level_0") @map("allowed_groups")
  reminders          String    @default("notification.3.days,bumpTopic.1.days")
  rawDiscourseSyntax String?   @db.Text @map("raw_discourse_syntax")
  
  @@index([eventStart])
  @@index([isActive])
  @@index([createdBy])
  @@map("signal_events")
}

// Email verification codes
model VerificationCode {
  id        Int      @id @default(autoincrement())
  userId    String   @map("user_id")
  code      String
  createdAt DateTime @default(now()) @map("created_at")
  expiresAt DateTime @map("expires_at")
  
  @@map("verification_codes")
}

// Matrix room members
model MatrixRoomMember {
  id          Int      @id @default(autoincrement())
  roomId      String   @map("room_id")
  userId      String   @map("user_id")
  displayName String?  @map("display_name")
  avatarUrl   String?  @map("avatar_url")
  membership  String?
  lastUpdated DateTime @default(now()) @updatedAt @map("last_updated")
  
  @@unique([roomId, userId], name: "idx_matrix_room_member_room_user")
  @@map("matrix_room_members")
}

// User notes from moderators
model UserNote {
  id           Int      @id @default(autoincrement())
  userId       Int      @map("user_id")
  content      String
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @default(now()) @updatedAt @map("updated_at")
  createdBy    String   @map("created_by")
  lastEditedBy String?  @map("last_edited_by")
  
  // Relationships
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("user_notes")
}

// Invitation system
model Invite {
  id        Int       @id @default(autoincrement())
  token     String    @unique
  label     String?
  email     String?   // Email for personalized invites
  name      String?   // Full name for personalized invites
  groups    String?   // JSON array of group IDs to pre-assign
  createdAt DateTime  @default(now()) @map("created_at")
  expiresAt DateTime  @map("expires_at")
  createdBy String?   @map("created_by")
  isUsed    Boolean   @default(false) @map("is_used")
  usedBy    String?   @map("used_by")
  usedAt    DateTime? @map("used_at")
  
  @@map("invites")
}

// Groups for Authentik integration
model Group {
  id               Int         @id @default(autoincrement())
  name             String      @unique
  description      String?
  authentikGroupId String?     @map("authentik_group_id")
  
  // Relationships
  users UserGroup[]
  
  @@map("groups")
}

// User-Group relationship table
model UserGroup {
  userId  Int @map("user_id")
  groupId Int @map("group_id")
  
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  group Group @relation(fields: [groupId], references: [id], onDelete: Cascade)
  
  @@id([userId, groupId])
  @@map("user_groups")
}

// Moderator permissions
model ModeratorPermission {
  id              Int      @id @default(autoincrement())
  userId          Int      @map("user_id")
  permissionType  String   @map("permission_type")
  permissionValue String?  @map("permission_value")
  createdAt       DateTime @default(now()) @map("created_at")
  createdBy       String   @map("created_by")
  
  // Relationships
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([permissionType, permissionValue])
  @@map("moderator_permissions")
}

// Matrix user cache
model MatrixUser {
  userId       String    @id @map("user_id")
  displayName  String?   @map("display_name")
  avatarUrl    String?   @map("avatar_url")
  isSignalUser Boolean   @default(false) @map("is_signal_user")
  lastSeen     DateTime? @map("last_seen")
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime  @default(now()) @updatedAt @map("updated_at")
  
  // Relationships
  memberships MatrixRoomMembership[]
  
  @@index([isSignalUser])
  @@map("matrix_users")
}

// Matrix room cache
model MatrixRoom {
  roomId        String    @id @map("room_id")
  name          String?
  displayName   String?   @map("display_name")
  topic         String?
  canonicalAlias String?  @map("canonical_alias")
  memberCount   Int       @default(0) @map("member_count")
  roomType      String?   @map("room_type")
  isDirect      Boolean   @default(false) @map("is_direct")
  isEncrypted   Boolean   @default(false) @map("is_encrypted")
  lastSynced    DateTime? @map("last_synced")
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @default(now()) @updatedAt @map("updated_at")
  
  // Relationships
  memberships MatrixRoomMembership[]
  
  @@index([memberCount])
  @@index([isDirect])
  @@index([lastSynced])
  @@map("matrix_rooms")
}

// Matrix room membership cache
model MatrixRoomMembership {
  id               Int      @id @default(autoincrement())
  roomId           String   @map("room_id")
  userId           String   @map("user_id")
  membershipStatus String   @default("join") @map("membership_status")
  joinedAt         DateTime? @map("joined_at")
  createdAt        DateTime  @default(now()) @map("created_at")
  updatedAt        DateTime  @default(now()) @updatedAt @map("updated_at")
  
  // Relationships
  user MatrixUser @relation(fields: [userId], references: [userId], onDelete: Cascade)
  room MatrixRoom @relation(fields: [roomId], references: [roomId], onDelete: Cascade)
  
  @@unique([roomId, userId])
  @@index([roomId])
  @@index([userId])
  @@map("matrix_cache_memberships")
}

// Matrix sync status tracking
model MatrixSyncStatus {
  id                   Int      @id @default(autoincrement())
  syncType             String   @map("sync_type")
  status               String   @default("pending")
  lastSync             DateTime? @map("last_sync")
  totalItems           Int      @default(0) @map("total_items")
  processedItems       Int      @default(0) @map("processed_items")
  errorMessage         String?  @map("error_message")
  syncDurationSeconds  Int?     @map("sync_duration_seconds")
  createdAt            DateTime @default(now()) @map("created_at")
  updatedAt            DateTime @default(now()) @updatedAt @map("updated_at")
  
  @@index([syncType])
  @@index([status])
  @@map("matrix_sync_status")
}

// Matrix user cache aggregated
model MatrixUserCache {
  userId       String    @id @map("user_id")
  displayName  String?   @map("display_name")
  avatarUrl    String?   @map("avatar_url")
  isSignalUser Boolean   @default(false) @map("is_signal_user")
  roomCount    Int       @default(0) @map("room_count")
  lastActivity DateTime? @map("last_activity")
  cacheUpdated DateTime  @default(now()) @updatedAt @map("cache_updated")
  
  @@index([isSignalUser])
  @@index([roomCount])
  @@map("matrix_user_cache")
}

// Email communication history tracking
model EmailHistory {
  id              Int      @id @default(autoincrement())
  recipientId     Int?     @map("recipient_id") // User ID if recipient is a registered user
  recipientEmail  String   @map("recipient_email")
  senderUsername  String   @map("sender_username") // Admin who sent the email
  subject         String
  emailType       String   @map("email_type") // 'welcome', 'admin_message', 'invite', 'password_reset', 'custom'
  status          String   @default("sent") // 'sent', 'failed', 'queued'
  sentAt          DateTime @default(now()) @map("sent_at")
  deliveredAt     DateTime? @map("delivered_at")
  errorMessage    String?  @map("error_message")
  messagePreview  String?  @map("message_preview") // First 200 chars for search/preview
  
  // Relations
  recipient       User?    @relation(fields: [recipientId], references: [id], onDelete: SetNull)
  
  @@index([recipientId])
  @@index([senderUsername])
  @@index([sentAt])
  @@index([emailType])
  @@index([status])
  @@map("email_history")
}

// Signal verification codes for account linking
model SignalVerificationCode {
  id            Int       @id @default(autoincrement())
  userId        Int       @map("user_id")
  phoneNumber   String    @map("phone_number")
  code          String    // Hashed verification code
  salt          String    // Salt for hashing
  attempts      Int       @default(0)
  maxAttempts   Int       @default(3) @map("max_attempts")
  verified      Boolean   @default(false)
  expiresAt     DateTime  @map("expires_at")
  verifiedAt    DateTime? @map("verified_at")
  createdAt     DateTime  @default(now()) @map("created_at")
  
  // Relations
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([phoneNumber])
  @@index([expiresAt])
  @@index([verified])
  @@map("signal_verification_codes")
}

// Signal Groups - Cached group information for fast retrieval
model SignalGroup {
  id              String    @id // Use the actual Signal group ID
  name            String
  description     String?
  memberCount     Int       @default(0) @map("member_count")
  botIsAdmin      Boolean   @default(false) @map("bot_is_admin")
  botIsMember     Boolean   @default(true) @map("bot_is_member")
  groupType       String?   @map("group_type") // "normal", "announcement", etc.
  inviteLink      String?   @map("invite_link")
  lastUpdated     DateTime  @default(now()) @map("last_updated")
  createdAt       DateTime  @default(now()) @map("created_at")
  
  @@index([memberCount])
  @@index([lastUpdated])
  @@index([botIsAdmin])
  @@map("signal_groups")
}

// Signal group memberships tracking
model SignalGroupMembership {
  id        Int      @id @default(autoincrement())
  userId    Int      @map("user_id")
  groupId   String   @map("group_id")
  groupName String?  @map("group_name")
  joinedAt  DateTime @default(now()) @map("joined_at")
  status    String   @default("active") // active, left, removed
  
  // Relationships
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([userId, groupId])
  @@index([userId])
  @@index([groupId])
  @@index([status])
  @@map("signal_group_memberships")
}

// Available Signal groups that users can discover and join
model SignalAvailableGroup {
  id               Int      @id @default(autoincrement())
  groupId          String   @unique @map("group_id")
  name             String
  description      String?
  isPublic         Boolean  @default(true) @map("is_public")
  requiresApproval Boolean  @default(false) @map("requires_approval")
  maxMembers       Int?     @map("max_members")
  adminUserId      Int?     @map("admin_user_id")
  createdAt        DateTime @default(now()) @map("created_at")
  displayOrder     Int      @default(0) @map("display_order")
  isActive         Boolean  @default(true) @map("is_active")
  
  // Relationships
  admin User? @relation("GroupAdmin", fields: [adminUserId], references: [id])
  joinRequests SignalGroupJoinRequest[]
  
  @@index([isPublic])
  @@index([isActive])
  @@index([displayOrder])
  @@map("signal_available_groups")
}

// Signal group join requests
model SignalGroupJoinRequest {
  id          Int       @id @default(autoincrement())
  userId      Int       @map("user_id")
  groupId     String    @map("group_id")
  message     String?   // Optional message from user
  status      String    @default("pending") // pending, approved, denied
  requestedAt DateTime  @default(now()) @map("requested_at")
  processedAt DateTime? @map("processed_at")
  processedBy Int?      @map("processed_by")
  
  // Relationships
  user      User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  processor User? @relation("ProcessedRequests", fields: [processedBy], references: [id])
  group     SignalAvailableGroup @relation(fields: [groupId], references: [groupId])
  
  @@unique([userId, groupId])
  @@index([userId])
  @@index([groupId])
  @@index([status])
  @@index([requestedAt])
  @@map("signal_group_join_requests")
}

// Signal Messages - Store all messages for history and summarization
model SignalMessage {
  id               String    @id @default(cuid())
  groupId          String?   @map("group_id") // null for DMs
  groupName        String?   @map("group_name")
  sourceNumber     String?   @map("source_number")
  sourceName       String?   @map("source_name")
  sourceUuid       String?   @map("source_uuid")
  message          String    @db.Text
  timestamp        BigInt    // Signal timestamp
  attachments      Json?     // JSON array of attachment info
  mentions         Json?     // JSON array of mentions
  isReply          Boolean   @default(false) @map("is_reply")
  quotedMessageId  String?   @map("quoted_message_id")
  quotedText       String?   @map("quoted_text") @db.Text
  createdAt        DateTime  @default(now()) @map("created_at")
  
  // Relationships
  reactions        SignalReaction[]
  quotedMessage    SignalMessage? @relation("QuotedMessages", fields: [quotedMessageId], references: [id])
  quotingMessages  SignalMessage[] @relation("QuotedMessages")
  
  @@unique([timestamp, sourceNumber, groupId])
  @@index([groupId])
  @@index([sourceNumber])
  @@index([timestamp])
  @@index([createdAt])
  @@map("signal_messages")
}

// Signal Reactions - Track emoji reactions on messages
model SignalReaction {
  id            String    @id @default(cuid())
  messageId     String    @map("message_id")
  emoji         String
  reactorNumber String    @map("reactor_number")
  reactorName   String?   @map("reactor_name")
  reactorUuid   String?   @map("reactor_uuid")
  timestamp     BigInt
  isRemove      Boolean   @default(false) @map("is_remove")
  createdAt     DateTime  @default(now()) @map("created_at")
  
  // Relationships
  message       SignalMessage @relation(fields: [messageId], references: [id], onDelete: Cascade)
  
  @@unique([messageId, emoji, reactorNumber])
  @@index([messageId])
  @@index([reactorNumber])
  @@index([timestamp])
  @@map("signal_reactions")
}

// News Link Tracking - Track news links shared and their engagement
model NewsLink {
  id                String    @id @default(cuid())
  url               String
  domain            String?
  title             String?   @db.Text
  summary           String?   @db.Text  // AI-generated summary
  groupId           String    @map("group_id")
  groupName         String?   @map("group_name")
  postedBy          String    @map("posted_by") // phone number
  postedByName      String?   @map("posted_by_name")
  forumLink         String?   @map("forum_link") // Deprecated - use forumUrl
  forumUrl          String?   @map("forum_url") // Link to forum discussion if created
  postCount         Int       @default(1) @map("post_count") // Times this URL was shared
  reactionCount     Int       @default(0) @map("reaction_count") // Total reactions
  thumbsUp          Int       @default(0) @map("thumbs_up")
  thumbsDown        Int       @default(0) @map("thumbs_down")
  firstPostedAt     DateTime  @default(now()) @map("first_posted_at")
  lastPostedAt      DateTime  @default(now()) @map("last_posted_at")
  
  @@unique([url, groupId])
  @@index([groupId])
  @@index([domain])
  @@index([postedBy])
  @@index([firstPostedAt])
  @@map("news_links")
}

// Repository Link Tracking - Track GitHub/GitLab repositories shared in chat
model RepositoryLink {
  id               String    @id @default(cuid())
  url              String
  platform         String    // GitHub, GitLab, Bitbucket, etc.
  repositoryName   String    @map("repository_name") // owner/repo format
  owner            String    // repository owner
  name             String    // repository name
  description      String?   @db.Text
  language         String?   // primary programming language
  stars            Int       @default(0)
  forks            Int       @default(0)
  openIssues       Int       @default(0) @map("open_issues")
  license          String?
  topics           String?   @db.Text // JSON array of topics/tags
  isPrivate        Boolean   @default(false) @map("is_private")
  isFork           Boolean   @default(false) @map("is_fork")
  isArchived       Boolean   @default(false) @map("is_archived")
  lastUpdated      DateTime? @map("last_updated") // when repo was last updated
  groupId          String    @map("group_id")
  groupName        String?   @map("group_name")
  postedBy         String    @map("posted_by") // phone number
  postedByName     String?   @map("posted_by_name")
  postCount        Int       @default(1) @map("post_count") // Times this URL was shared
  firstPostedAt    DateTime  @default(now()) @map("first_posted_at")
  lastPostedAt     DateTime  @default(now()) @map("last_posted_at")
  
  @@unique([url, groupId])
  @@index([groupId])
  @@index([platform])
  @@index([language])
  @@index([owner])
  @@index([postedBy])
  @@index([firstPostedAt])
  @@index([stars])
  @@map("repository_links")
}

// URL Summary Tracking - Track URLs processed through !tldr
model UrlSummary {
  id                String    @id @default(cuid())
  url               String
  groupId           String?   @map("group_id")
  groupName         String?   @map("group_name")
  requestedBy       String    @map("requested_by") // phone number
  requestedByName   String?   @map("requested_by_name")
  summary           String    @db.Text
  aiProvider        String?   @map("ai_provider") // 'openai' or 'local'
  processingTime    Int?      @map("processing_time") // milliseconds
  createdAt         DateTime  @default(now()) @map("created_at")
  
  @@index([url])
  @@index([groupId])
  @@index([requestedBy])
  @@index([createdAt])
  @@map("url_summaries")
}

// Bot Command Usage - Track all bot command invocations
model BotCommandUsage {
  id                String    @id @default(cuid())
  command           String
  args              String?   @db.Text
  groupId           String?   @map("group_id")
  groupName         String?   @map("group_name")
  userId            String    @map("user_id") // phone number
  userName          String?   @map("user_name")
  success           Boolean   @default(true)
  responseTime      Int?      @map("response_time") // milliseconds
  errorMessage      String?   @map("error_message") @db.Text
  timestamp         DateTime  @default(now())
  
  @@index([command])
  @@index([groupId])
  @@index([userId])
  @@index([timestamp])
  @@index([success])
  @@map("bot_command_usage")
}

// Bot Message Reactions - Track reactions to bot's messages
model BotMessageReaction {
  id                String    @id @default(cuid())
  botMessageId      String?   @map("bot_message_id") // Signal message ID if available
  botMessage        String    @map("bot_message") @db.Text // Content of bot's message
  groupId           String?   @map("group_id")
  groupName         String?   @map("group_name")
  reactorId         String    @map("reactor_id") // phone number
  reactorName       String?   @map("reactor_name")
  reaction          String    // emoji
  isPositive        Boolean?  @map("is_positive") // true for 👍, false for 👎, null for others
  command           String?   // Command that generated this bot message
  timestamp         DateTime  @default(now())
  
  @@index([groupId])
  @@index([reactorId])
  @@index([reaction])
  @@index([isPositive])
  @@index([command])
  @@index([timestamp])
  @@map("bot_message_reactions")
}

// Bot Errors - Track all bot errors for debugging
model BotError {
  id                String    @id @default(cuid())
  errorType         String    @map("error_type") // 'command_error', 'system_error', 'api_error', etc.
  errorMessage      String    @map("error_message") @db.Text
  stackTrace        String?   @map("stack_trace") @db.Text
  command           String?   // Command that caused error if applicable
  groupId           String?   @map("group_id")
  groupName         String?   @map("group_name")
  userId            String?   @map("user_id") // phone number
  userName          String?   @map("user_name")
  context           Json?     // Additional context data
  timestamp         DateTime  @default(now())
  
  @@index([errorType])
  @@index([command])
  @@index([groupId])
  @@index([timestamp])
  @@map("bot_errors")
}

// Q&A System - Track questions and answers
model QAndAQuestion {
  id                String    @id @default(cuid())
  questionId        Int       @unique @map("question_id") // Sequential question ID for easy reference
  question          String    @db.Text
  title             String?   @db.Text
  asker             String    // Display name
  askerPhone        String    @map("asker_phone") // Phone number
  groupId           String    @map("group_id")
  groupName         String?   @map("group_name")
  solved            Boolean   @default(false)
  solvedBy          String?   @map("solved_by") // Phone number of solver
  solvedAt          DateTime? @map("solved_at")
  discourseTopicId  String?   @map("discourse_topic_id")
  forumLink         String?   @map("forum_link")
  timestamp         DateTime  @default(now())
  answers           Json?     // Array of answers: [{answerer, answer, timestamp}]
  
  @@index([questionId])
  @@index([groupId])
  @@index([askerPhone])
  @@index([solved])
  @@index([timestamp])
  @@map("q_and_a_questions")
}
