
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.11.1
 * Query Engine version: f40f79ec31188888a2e33acda0ecc8fd10a853a9
 */
Prisma.prismaVersion = {
  client: "6.11.1",
  engine: "f40f79ec31188888a2e33acda0ecc8fd10a853a9"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  username: 'username',
  email: 'email',
  firstName: 'firstName',
  lastName: 'lastName',
  password: 'password',
  isActive: 'isActive',
  isAdmin: 'isAdmin',
  isModerator: 'isModerator',
  dateJoined: 'dateJoined',
  lastLogin: 'lastLogin',
  attributes: 'attributes',
  authentikId: 'authentikId',
  signalIdentity: 'signalIdentity',
  matrixUsername: 'matrixUsername'
};

exports.Prisma.AdminEventScalarFieldEnum = {
  id: 'id',
  eventType: 'eventType',
  username: 'username',
  details: 'details',
  timestamp: 'timestamp'
};

exports.Prisma.DashboardSettingsScalarFieldEnum = {
  id: 'id',
  key: 'key',
  value: 'value',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CommunityBookmarkScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  url: 'url',
  icon: 'icon',
  category: 'category',
  order: 'order',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.DashboardAnnouncementScalarFieldEnum = {
  id: 'id',
  title: 'title',
  content: 'content',
  type: 'type',
  isActive: 'isActive',
  priority: 'priority',
  expiresAt: 'expiresAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  createdBy: 'createdBy'
};

exports.Prisma.UserInvitationScalarFieldEnum = {
  id: 'id',
  inviterUserId: 'inviterUserId',
  inviteeEmail: 'inviteeEmail',
  inviteeName: 'inviteeName',
  inviteePhone: 'inviteePhone',
  roomIds: 'roomIds',
  status: 'status',
  inviteToken: 'inviteToken',
  message: 'message',
  expiresAt: 'expiresAt',
  acceptedAt: 'acceptedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CommunityEventScalarFieldEnum = {
  id: 'id',
  eventType: 'eventType',
  username: 'username',
  details: 'details',
  timestamp: 'timestamp',
  isPublic: 'isPublic',
  category: 'category'
};

exports.Prisma.VerificationCodeScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  code: 'code',
  createdAt: 'createdAt',
  expiresAt: 'expiresAt'
};

exports.Prisma.MatrixRoomMemberScalarFieldEnum = {
  id: 'id',
  roomId: 'roomId',
  userId: 'userId',
  displayName: 'displayName',
  avatarUrl: 'avatarUrl',
  membership: 'membership',
  lastUpdated: 'lastUpdated'
};

exports.Prisma.UserNoteScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  content: 'content',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  createdBy: 'createdBy',
  lastEditedBy: 'lastEditedBy'
};

exports.Prisma.InviteScalarFieldEnum = {
  id: 'id',
  token: 'token',
  label: 'label',
  email: 'email',
  name: 'name',
  groups: 'groups',
  createdAt: 'createdAt',
  expiresAt: 'expiresAt',
  createdBy: 'createdBy',
  isUsed: 'isUsed',
  usedBy: 'usedBy',
  usedAt: 'usedAt'
};

exports.Prisma.GroupScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  authentikGroupId: 'authentikGroupId'
};

exports.Prisma.UserGroupScalarFieldEnum = {
  userId: 'userId',
  groupId: 'groupId'
};

exports.Prisma.ModeratorPermissionScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  permissionType: 'permissionType',
  permissionValue: 'permissionValue',
  createdAt: 'createdAt',
  createdBy: 'createdBy'
};

exports.Prisma.MatrixUserScalarFieldEnum = {
  userId: 'userId',
  displayName: 'displayName',
  avatarUrl: 'avatarUrl',
  isSignalUser: 'isSignalUser',
  lastSeen: 'lastSeen',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.MatrixRoomScalarFieldEnum = {
  roomId: 'roomId',
  name: 'name',
  displayName: 'displayName',
  topic: 'topic',
  canonicalAlias: 'canonicalAlias',
  memberCount: 'memberCount',
  roomType: 'roomType',
  isDirect: 'isDirect',
  isEncrypted: 'isEncrypted',
  lastSynced: 'lastSynced',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.MatrixRoomMembershipScalarFieldEnum = {
  id: 'id',
  roomId: 'roomId',
  userId: 'userId',
  membershipStatus: 'membershipStatus',
  joinedAt: 'joinedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.MatrixSyncStatusScalarFieldEnum = {
  id: 'id',
  syncType: 'syncType',
  status: 'status',
  lastSync: 'lastSync',
  totalItems: 'totalItems',
  processedItems: 'processedItems',
  errorMessage: 'errorMessage',
  syncDurationSeconds: 'syncDurationSeconds',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.MatrixUserCacheScalarFieldEnum = {
  userId: 'userId',
  displayName: 'displayName',
  avatarUrl: 'avatarUrl',
  isSignalUser: 'isSignalUser',
  roomCount: 'roomCount',
  lastActivity: 'lastActivity',
  cacheUpdated: 'cacheUpdated'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};


exports.Prisma.ModelName = {
  User: 'User',
  AdminEvent: 'AdminEvent',
  DashboardSettings: 'DashboardSettings',
  CommunityBookmark: 'CommunityBookmark',
  DashboardAnnouncement: 'DashboardAnnouncement',
  UserInvitation: 'UserInvitation',
  CommunityEvent: 'CommunityEvent',
  VerificationCode: 'VerificationCode',
  MatrixRoomMember: 'MatrixRoomMember',
  UserNote: 'UserNote',
  Invite: 'Invite',
  Group: 'Group',
  UserGroup: 'UserGroup',
  ModeratorPermission: 'ModeratorPermission',
  MatrixUser: 'MatrixUser',
  MatrixRoom: 'MatrixRoom',
  MatrixRoomMembership: 'MatrixRoomMembership',
  MatrixSyncStatus: 'MatrixSyncStatus',
  MatrixUserCache: 'MatrixUserCache'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
